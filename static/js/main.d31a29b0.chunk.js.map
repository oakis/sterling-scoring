{"version":3,"sources":["views/SetupView/index.js","views/OverlayView/index.js","Router.js","serviceWorker.js","index.js"],"names":["SetupView","useState","alleys","setAlleys","selectedAlley","setSelectedAlley","selectedFrom","setSelectedFrom","selectedTo","setSelectedTo","selectedUrl","window","location","origin","useEffect","fetch","headers","apiKey","then","response","json","data","swedishAlleys","filter","alley","countryCode","map","lanes","name","companyName","uuid","sort","a","b","console","log","selectFromLane","e","preventDefault","target","value","selectToLane","getLanes","numberOfLanes","find","index","push","className","htmlFor","id","onChange","key","length","lane","renderSelectFromLane","renderSelectToLane","onClick","open","disabled","navigator","clipboard","writeText","OverlayView","setTimeout","reload","fromLaneNumber","setFromLaneNumber","toLaneNumber","setToLaneNumber","useParams","fromLane","toLane","parseInt","Math","abs","selectedLanes","alt","src","App","path","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d31a29b0.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./index.css\";\r\n\r\nconst apiKey = \"ifqUIAvwExByDEA0NLbqEXN2w8vSef2dQovE\";\r\n\r\nfunction SetupView() {\r\n  const [alleys, setAlleys] = useState([]);\r\n  const [selectedAlley, setSelectedAlley] = useState(\"\");\r\n  const [selectedFrom, setSelectedFrom] = useState(\"\");\r\n  const [selectedTo, setSelectedTo] = useState(\"\");\r\n\r\n  const selectedUrl = `${window.location.origin}/sterling-scoring/${selectedAlley}/${selectedFrom}/${selectedTo}/`;\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://api.lanetalk.com/v1/bowlingcenters/\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        apiKey: apiKey,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const swedishAlleys = data\r\n          .filter((alley) => alley.countryCode === \"se\")\r\n          .map((alley) => ({\r\n            lanes: alley.lanes,\r\n            name: `${alley.companyName} (${alley.location})`,\r\n            uuid: alley.uuid,\r\n          }))\r\n          .sort((a, b) => {\r\n            if (b.name > a.name) {\r\n              return -1;\r\n            }\r\n            if (a.name > b.name) {\r\n              return 1;\r\n            }\r\n            return 0;\r\n          });\r\n        setAlleys(swedishAlleys);\r\n        setSelectedFrom(1);\r\n        setSelectedTo(1);\r\n        setSelectedAlley(swedishAlleys[0].uuid);\r\n      });\r\n  }, []);\r\n\r\n  console.log(alleys);\r\n\r\n  const selectAlley = (e) => {\r\n    e.preventDefault();\r\n    setSelectedAlley(e.target.value);\r\n  };\r\n\r\n  const selectFromLane = (e) => {\r\n    e.preventDefault();\r\n    setSelectedFrom(e.target.value);\r\n  };\r\n\r\n  const selectToLane = (e) => {\r\n    e.preventDefault();\r\n    setSelectedTo(e.target.value);\r\n  };\r\n\r\n  const getLanes = () => {\r\n    const numberOfLanes = alleys.find((alley) => alley.uuid === selectedAlley)\r\n      .lanes;\r\n    let lanes = [];\r\n    for (let index = 1; index < numberOfLanes + 1; index++) {\r\n      lanes.push(index);\r\n    }\r\n    return lanes;\r\n  };\r\n\r\n  const renderSelectFromLane = () => {\r\n    const lanes = getLanes();\r\n    return (\r\n      <>\r\n        <label htmlFor=\"select-from-lane\">Från bana</label>\r\n        <select id=\"select-from-lane\" onChange={selectFromLane}>\r\n          {lanes.map((lane) => (\r\n            <option key={lane} value={lane}>\r\n              {lane}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const renderSelectToLane = () => {\r\n    const lanes = getLanes();\r\n    return (\r\n      <>\r\n        <label htmlFor=\"select-to-lane\">Till bana</label>\r\n        <select id=\"select-to-lane\" onChange={selectToLane}>\r\n          {lanes.map((lane) => (\r\n            <option key={lane} value={lane}>\r\n              {lane}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const copyUrl = () => {\r\n    window.navigator.clipboard.writeText(selectedUrl);\r\n  };\r\n\r\n  const viewUrl = () => {\r\n    window.open(selectedUrl, \"blank\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"setup-wrapper\">\r\n      <label htmlFor=\"select-alleys\">Välj hall</label>\r\n      <select id=\"select-alleys\" onChange={selectAlley}>\r\n        {alleys.map((alley) => (\r\n          <option key={alley.uuid} value={alley.uuid}>\r\n            {alley.name}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      {selectedAlley.length > 0 && renderSelectFromLane()}\r\n      {selectedAlley.length > 0 && renderSelectToLane()}\r\n      <div className=\"current-setup\">\r\n        <button\r\n          onClick={viewUrl}\r\n          disabled={\r\n            selectedAlley === \"\" || selectedFrom === \"\" || selectedTo === \"\"\r\n          }\r\n        >\r\n          Visa scoreboard\r\n        </button>\r\n        <button\r\n          onClick={copyUrl}\r\n          disabled={\r\n            selectedAlley === \"\" || selectedFrom === \"\" || selectedTo === \"\"\r\n          }\r\n        >\r\n          Kopiera URL\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SetupView;\r\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport \"./index.css\";\n\nfunction OverlayView() {\n  setTimeout(() => {\n    window.location.reload();\n  }, 5000);\n\n  const [fromLaneNumber, setFromLaneNumber] = useState();\n  const [toLaneNumber, setToLaneNumber] = useState();\n\n  const { alley, fromLane, toLane } = useParams();\n\n  useEffect(() => {\n    setFromLaneNumber(parseInt(fromLane, 10));\n    setToLaneNumber(parseInt(toLane, 10));\n  }, [fromLane, toLane]);\n\n  const numberOfLanes = Math.abs(fromLaneNumber - toLaneNumber);\n\n  let selectedLanes = [];\n  for (let index = 0; index <= numberOfLanes; index++) {\n    selectedLanes.push(fromLaneNumber + index);\n  }\n\n  return (\n    <div className=\"overlay-wrapper\">\n      <div className=\"lane-wrapper\">\n        {selectedLanes.map((lane) => (\n          <img\n            key={lane}\n            className=\"lane\"\n            alt={lane}\n            src={`https://scoring.lanetalk.com/upload/${alley}/VTVFile${lane}.jpg`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default OverlayView;\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport SetupView from \"./views/SetupView\";\r\nimport OverlayView from \"./views/OverlayView\";\r\n\r\nconst nameSpace = \"sterling-scoring\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path={`/${nameSpace}/:alley/:fromLane/:toLane`}>\r\n          <OverlayView />\r\n        </Route>\r\n        <Route path={`/${nameSpace}`}>\r\n          <SetupView />\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}